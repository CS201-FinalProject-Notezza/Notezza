/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NewGUI;

import GUI.*;
import NotezzaClient.NotezzaClient;
import NotezzaServer.Command;
import NotezzaServer.CommandType;
import objects.*;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.swing.border.LineBorder;

import javax.swing.*;

/**
 *
 * @author user
 */
public class MainWinInstr extends javax.swing.JFrame {
    private NotezzaClient client;
    private CourseList courseList;
    private Vector<Course> courses;
    private Course currentCourse;
    private Note currentNote;
    private DefaultListModel<String> notesOverviewModel = new DefaultListModel<String>();
    private Vector<Note> notes;
    private DefaultComboBoxModel dropDownModel;
    private InstructorPresentation presentation = null;

    /**
     * Creates new form MainWin
     */
    public MainWinInstr(NotezzaClient client, CourseList courseList) {
        this.client = client;
        this.courseList = courseList;
//        Vector<Course> courses = courseList.getCourses();
//        if (courses != null && courses.size() > 0) {
//            currentCourse = courses.get(0);
//            if (currentCourse.getAllNotes().size() > 0) {
//                currentNote = currentCourse.getAllNotes().get(0);
//            } else {
//                currentNote = null;
//            }
//        } else {
//            currentCourse = null;
//            currentNote = null;
//        }
        initComponents();
        initContents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        functionBar = new javax.swing.JPanel();
        sortChoiceBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchNote = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        homeLabel = new javax.swing.JLabel();
        classes = new javax.swing.JComboBox<>();
        Menu = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lecture = new javax.swing.JLabel();
        addClass = new javax.swing.JLabel();
        logout = new javax.swing.JLabel();
        profile = new javax.swing.JLabel();
        viewMember = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        overviewList = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        layer2 = new javax.swing.JPanel();
        postScroll = new javax.swing.JScrollPane();
        post = new javax.swing.JTextPane();
        layer1 = new javax.swing.JPanel();
        likeButton = new javax.swing.JButton();
        dislikeButton = new javax.swing.JButton();
        CommentScroll = new javax.swing.JScrollPane();
        comments = new javax.swing.JTextPane();
        writeCommentPanel = new javax.swing.JPanel();
        createComment = new javax.swing.JTextField();
        postComment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        functionBar.setBackground(new java.awt.Color(114, 137, 218));

        sortChoiceBox.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        sortChoiceBox.setForeground(new java.awt.Color(42, 77, 105));
        sortChoiceBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Latest Date", "Highest Rating", "Most Comments", "Most Likes" }));
        sortChoiceBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortChoiceBoxItemStateChanged(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sort Posts By:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/search-20.png"))); // NOI18N

        searchNote.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        searchNote.setForeground(new java.awt.Color(42, 77, 105));
        searchNote.setText("Search Notes");
        searchNote.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(42, 77, 105), 1, true));
        searchNote.setCaretColor(new java.awt.Color(42, 77, 105));
        searchNote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchNoteMouseClicked(evt);
            }
        });
        
        searchNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNoteActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton1.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(42, 77, 105));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/plus-17-dark.png"))); // NOI18N
        jButton1.setText("Add New Post");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createNewNote(evt);
            }
        });

        jSeparator4.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        homeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/home-20.png"))); // NOI18N
        homeLabel.setToolTipText("Change Class");
        
        
        classes.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        classes.setForeground(new java.awt.Color(42, 77, 105));
        classes.setToolTipText("Change Your Class");
        classes.addItemListener(this::classesItemStateChanged);
//        classes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CS201" }));
//        classes.setToolTipText("Change Class");

        javax.swing.GroupLayout functionBarLayout = new javax.swing.GroupLayout(functionBar);
        functionBar.setLayout(functionBarLayout);
        functionBarLayout.setHorizontalGroup(
            functionBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionBarLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(homeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchNote, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortChoiceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        functionBarLayout.setVerticalGroup(
            functionBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(functionBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(homeLabel)
                    .addComponent(classes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator4)
                    .addComponent(jLabel3)
                    .addComponent(searchNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(sortChoiceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2)
                    .addComponent(jButton1))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        Menu.setBackground(new java.awt.Color(59, 89, 152));

        jLabel1.setBackground(new java.awt.Color(144, 201, 229));
        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(231, 239, 246));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NOTEZZA");

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/logo50.png"))); // NOI18N

        lecture.setBackground(new java.awt.Color(59, 89, 152));
        lecture.setFont(new java.awt.Font("Eurostile", 1, 17)); // NOI18N
        lecture.setForeground(new java.awt.Color(231, 239, 246));
        lecture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lecture.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/lecture-20.png"))); // NOI18N
        lecture.setText("Enter Lecture");
        lecture.setToolTipText("");
        lecture.setOpaque(true);
        lecture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lectureMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lectureMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lectureMouseEntered(evt);
            }
        });

        addClass.setBackground(new java.awt.Color(59, 89, 152));
        addClass.setFont(new java.awt.Font("Eurostile", 1, 17)); // NOI18N
        addClass.setForeground(new java.awt.Color(231, 239, 246));
        addClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addClass.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/plus-20.png"))); // NOI18N
        addClass.setText(" Create Class");
        addClass.setToolTipText("");
        addClass.setOpaque(true);
        addClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addClassMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addClassMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addClassMouseEntered(evt);
            }
        });

        logout.setBackground(new java.awt.Color(59, 89, 152));
        logout.setFont(new java.awt.Font("Eurostile", 1, 17)); // NOI18N
        logout.setForeground(new java.awt.Color(231, 239, 246));
        logout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/exit-20.png"))); // NOI18N
        logout.setText("Log Out");
        logout.setToolTipText("");
        logout.setOpaque(true);
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutMouseEntered(evt);
            }
        });

        profile.setBackground(new java.awt.Color(59, 89, 152));
        profile.setFont(new java.awt.Font("Eurostile", 1, 17)); // NOI18N
        profile.setForeground(new java.awt.Color(231, 239, 246));
        profile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        profile.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/profile-20.png"))); // NOI18N
        profile.setText(" Profile");
        profile.setToolTipText("");
        profile.setOpaque(true);
        profile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                profileMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                profileMouseEntered(evt);
            }
        });

        viewMember.setBackground(new java.awt.Color(59, 89, 152));
        viewMember.setFont(new java.awt.Font("Eurostile", 1, 17)); // NOI18N
        viewMember.setForeground(new java.awt.Color(231, 239, 246));
        viewMember.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        viewMember.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/viewMember-20.png"))); // NOI18N
        viewMember.setText(" Find Students");
        viewMember.setToolTipText("");
        viewMember.setOpaque(true);
        viewMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewMemberMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                viewMemberMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                viewMemberMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(logo)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lecture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewMember, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(logo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(profile, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(addClass, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lecture, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewMember, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jPanel5.setBackground(new java.awt.Color(231, 239, 246));

//        OverviewList.setModel(new javax.swing.AbstractListModel<String>() {
//            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
//            public int getSize() { return strings.length; }
//            public String getElementAt(int i) { return strings[i]; }
//        });
        overviewList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        overviewList.setCellRenderer(getCellRenderer());
        overviewList.setSelectionBackground(new java.awt.Color(223, 227, 238));
        overviewList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        overviewList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                this.likeButton.setEnabled(true);
                this.dislikeButton.setEnabled(true);
                this.postComment.setEnabled(true);
                this.createComment.setEnabled(true);
                int noteForIndex = overviewList.getSelectedIndex();
                if (noteForIndex < currentCourse.getAllNotes().size() && noteForIndex >= 0) {
                    currentNote = notes.get(noteForIndex);
                    displayCurrentNote();
                }
            }
        });
        jScrollPane1.setViewportView(overviewList);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel6.setBackground(new java.awt.Color(231, 239, 246));

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLayeredPane1.setOpaque(true);

        postScroll.setBorder(null);

        post.setEditable(false);
        post.setContentType("text/html"); // NOI18N
        postScroll.setViewportView(post);

        javax.swing.GroupLayout layer2Layout = new javax.swing.GroupLayout(layer2);
        layer2.setLayout(layer2Layout);
        layer2Layout.setHorizontalGroup(
            layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 561, Short.MAX_VALUE)
            .addGroup(layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(postScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
        );
        layer2Layout.setVerticalGroup(
            layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 157, Short.MAX_VALUE)
            .addGroup(layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(postScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
        );

        layer1.setOpaque(false);

        likeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/like-22.png"))); // NOI18N
        likeButton.setText("0");
        likeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeButtonActionPerformed(evt);
            }
        });
        

        dislikeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("img/dislike-22.png"))); // NOI18N
        dislikeButton.setText("0");
        dislikeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dislikeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layer1Layout = new javax.swing.GroupLayout(layer1);
        layer1.setLayout(layer1Layout);
        layer1Layout.setHorizontalGroup(
            layer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layer1Layout.createSequentialGroup()
                .addContainerGap(429, Short.MAX_VALUE)
                .addComponent(likeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dislikeButton)
                .addGap(14, 14, 14))
        );
        layer1Layout.setVerticalGroup(
            layer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layer1Layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addGroup(layer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(likeButton)
                    .addComponent(dislikeButton))
                .addContainerGap())
        );

        jLayeredPane1.setLayer(layer2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(layer1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(layer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(layer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 51, Short.MAX_VALUE)))
        );

        comments.setEditable(false);
        comments.setContentType("text/html"); // NOI18N
        CommentScroll.setViewportView(comments);

        writeCommentPanel.setBackground(new java.awt.Color(231, 239, 246));

        createComment.setToolTipText("Add Comment");
        createComment.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        createComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCommentActionPerformed(evt);
            }
        });

        postComment.setText("Comment");
        postComment.setToolTipText("");
        postComment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                postCommentMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout writeCommentPanelLayout = new javax.swing.GroupLayout(writeCommentPanel);
        writeCommentPanel.setLayout(writeCommentPanelLayout);
        writeCommentPanelLayout.setHorizontalGroup(
            writeCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writeCommentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createComment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postComment, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        writeCommentPanelLayout.setVerticalGroup(
            writeCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writeCommentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(writeCommentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(writeCommentPanelLayout.createSequentialGroup()
                        .addComponent(postComment)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(createComment))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
            .addComponent(CommentScroll)
            .addComponent(writeCommentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(CommentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(writeCommentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(functionBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(functionBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(Menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>  

    private void createNewNote(MouseEvent evt) {
        AddNote addnote = new AddNote(client,currentCourse);
        addnote.setVisible(true);
    }


    private void initContents() {
		if (courseList == null || courseList.getCourses() == null || courseList.getCourses().isEmpty()) {
			// No course available
			
			// classes dropdown box
			classes.setModel(new javax.swing.DefaultComboBoxModel<>(new String [] {"No Classes"}));
			classes.setToolTipText("Change Class");
			// Posts Overview
			overviewList.setModel(new javax.swing.AbstractListModel<String>() {
    				String[] strings = { "<html><h3>No Posts Available<h3><html>" };
    				public int getSize() { return strings.length; }
    				public String getElementAt(int i) { return strings[i]; }
    			});
			
			// Post Content
			this.post.setText("<html><body style='background-color:#f0f8ff;'>"
					+ "<div style='border: 1px solid; margin: 10px; padding: 20px; border-radius:25px; "
					+ "text-align:center; background: #ffffff; font-family: Lucida Grande'>"
					+ "<h1>You have no classes now.</h1></div></body></html>");
			this.likeButton.setEnabled(false);
			this.dislikeButton.setEnabled(false);
			this.postComment.setEnabled(false);
			this.jButton1.setEnabled(false);
			this.searchNote.setEnabled(false);
			this.sortChoiceBox.setEnabled(false);
			this.createComment.setEnabled(false);
			this.lecture.setEnabled(false);
            	this.viewMember.setEnabled(false);
			return;
		}
		courses = courseList.getCourses();
		// classes dropdown box
		dropDownModel = new DefaultComboBoxModel();
		for (Course course : courses) {
			dropDownModel.addElement(course.getCourseName());
		}
		classes.setModel(dropDownModel);
		classes.setToolTipText("Change Class");
		
		// Post Overview
		currentCourse = courses.get(0); 
		notes = currentCourse.getAllNotes();
		for (Note note : notes) {
			notesOverviewModel.addElement(Util.getHTMLforNoteOverview(note));
		}
		
		this.overviewList.setModel(notesOverviewModel);
		sortNotes();
		// Post Content
		this.post.setText("<html><body style='background-color:#f0f8ff;'>"
				+ "<div style='border: 1px solid; margin: 10px; padding: 20px; border-radius:25px; "
				+ "text-align:center; background: #ffffff; font-family: Lucida Grande'>"
				+ "<h1>Welcome to Notezza!"
				+ "<br/>Select a note to view!</h1></div>"
				+ "</body></html>");
		this.likeButton.setEnabled(false);
		this.dislikeButton.setEnabled(false);
		this.postComment.setEnabled(false);
		this.createComment.setEnabled(false);
    }
    
    private void addClassMouseEntered(java.awt.event.MouseEvent evt) {                                      
        addClass.setBackground(new Color(139,157,195));
    }                                     

    private void lectureMouseEntered(java.awt.event.MouseEvent evt) {                                     
        lecture.setBackground(new Color(139,157,195));
    }                                    

    private void logoutMouseEntered(java.awt.event.MouseEvent evt) {                                    
        logout.setBackground(new Color(139,157,195));
    }                                   

    private void addClassMouseExited(java.awt.event.MouseEvent evt) {                                     
        addClass.setBackground(new Color(59,89,152));
    }                                    

    private void lectureMouseExited(java.awt.event.MouseEvent evt) {                                    
        lecture.setBackground(new Color(59,89,152));
    }                                   

    private void logoutMouseExited(java.awt.event.MouseEvent evt) {                                   
        logout.setBackground(new Color(59,89,152));
    }                                  

    private void addClassMouseClicked(java.awt.event.MouseEvent evt) {                                      
        NewCourse newCourse = new NewCourse(client);
        newCourse.setVisible(true);
    }                                     

    private void lectureMouseClicked(java.awt.event.MouseEvent evt) {
        if (currentCourse != null && currentCourse.getCurrentLecture() != null) {
            System.out.println("POPPING UP PRESENTATION WINDOW..");
            presentation = new InstructorPresentation(this.client, currentCourse);
            client.setInstructorPresentationWindow(presentation);
            presentation.setVisible(true);
        } else {
            NewPresentation newPresentation = new NewPresentation(this.client,currentCourse);
            newPresentation.setVisible(true);
        }
    }                                    

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {                                    
		System.out.println("GOODBYE");
		System.exit(0);
    }                                   

    private void searchNoteMouseClicked(java.awt.event.MouseEvent evt) {                                        
        searchNote.setText("");
    }                                       

    private void sortChoiceBoxItemStateChanged(java.awt.event.ItemEvent evt) { 
    		sortNotes();
    }   
    
    private void sortNotes() {
        int sortTypeInt = sortChoiceBox.getSelectedIndex();
		notes = currentCourse.getSortedNotes(SortType.values()[sortTypeInt]);
		refreshList();
    }
    
    private void profileMouseClicked(java.awt.event.MouseEvent evt) {                                     
    		System.out.println("POPPING UP PROFILES...");
        UserProfile profile = new UserProfile(client.getUser(), client.getUser());
        profile.setVisible(true);
    }                                    

    private void profileMouseExited(java.awt.event.MouseEvent evt) {                                    
        profile.setBackground(new Color(59,89,152));
    }                                   

    private void profileMouseEntered(java.awt.event.MouseEvent evt) {                                     
        profile.setBackground(new Color(139,157,195));
    }                                    

    private void viewMemberMouseClicked(java.awt.event.MouseEvent evt) {                                        
		System.out.println("POPPING UP VIEW CLASSMATES...");
		if (currentCourse != null) {
			ViewStudentsInClass viewClassMate = new ViewStudentsInClass(client.getUser(), currentCourse.getStudents(),
					currentCourse.getInstructor());
			viewClassMate.setVisible(true);
		} else {
			System.out.println("Current course is null");
		}
    }                                       

    private void viewMemberMouseExited(java.awt.event.MouseEvent evt) {                                       
        viewMember.setBackground(new Color(59,89,152));
    }                                      

    private void viewMemberMouseEntered(java.awt.event.MouseEvent evt) {                                        
        viewMember.setBackground(new Color(139,157,195));
    }                                       

    private void createCommentActionPerformed(java.awt.event.ActionEvent evt) {
        postComment();
    }                                             

    private void postCommentMouseClicked(java.awt.event.MouseEvent evt) {                                         
        postComment();
    }

    private void postComment() {
        System.out.println("post comment clicked...");
        if (!createComment.getText().isEmpty()) {
            String commentContent = createComment.getText();
            Date date = Util.getCurrentDate();
            User user = client.getUser();
            Comment comment = new Comment(user, commentContent, date, currentNote);
            CourseNoteComment cnc = new CourseNoteComment(currentCourse,currentNote,comment);
            client.sendCommand(new Command(CommandType.ADD_COMMENT, cnc));
        }
        createComment.setText("");
    }
    
    private void likeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.out.println("Adding a like");
        client.sendCommand(new Command(CommandType.ADD_LIKE, new AddingLike(client.getUser(),currentNote)));
    } 
    
    private void dislikeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
    		System.out.println("Adding a dislike...");
        client.sendCommand(new Command(CommandType.ADD_DISLIKE, new AddingDislike(client.getUser(),currentNote)));
    }
    
    private void searchNoteActionPerformed(java.awt.event.ActionEvent evt) {                                         
		String keyword = this.searchNote.getText();
		notes = currentCourse.searchNote(keyword);
		this.refreshList();
		System.out.println("Performing search");
    }

    private void classesItemStateChanged(java.awt.event.ItemEvent evt) {
		String courseName = String.valueOf(classes.getSelectedItem());
		for (Course course : courses) {
			if (course.getCourseName().equals(courseName)) {
				currentCourse = course;
				//updateNotes();
				int index = sortChoiceBox.getSelectedIndex();
				if (index == 0) {
					sortNotes();
				} else {
					sortChoiceBox.setSelectedIndex(0);
				}
				break;
			}
		}
    }

    private void refreshList() {
    		this.notesOverviewModel = new DefaultListModel<String>();
		for (Note note: notes) {
			this.notesOverviewModel.addElement(Util.getHTMLforNoteOverview(note));
		}
		this.overviewList.setModel(notesOverviewModel);
    }
    
    private void clearList() {
    		this.notesOverviewModel = (DefaultListModel) overviewList.getModel();
    		notesOverviewModel.removeAllElements();
    }
    
    private void displayCurrentNote() {
        post.setText(Util.getHTMLforNoteDetail(currentNote));
        comments.setText(Util.getHTMLforComments(currentNote));
        likeButton.setText(Integer.toString(currentNote.getNumLikes()));
        dislikeButton.setText(Integer.toString(currentNote.getNumDislikes()));

    }
    
    private void updateNotes() {
        notes = currentCourse.getAllNotes();
    }
    
    public void addComment(Course course, Note note, Comment comment) {
        for (Course courseInList : courseList.getCourses()) {
            System.out.println("Receiving a comment now..");
            System.out.println("Checking courses..");
            if (courseInList.getCourseName().equals(course.getCourseName())) {
                System.out.println("Find course!");
                System.out.println("Checking notes..");
                for (Note noteInSideTheCourse : courseInList.getAllNotes()){
                    if (noteInSideTheCourse.getTitle().equals(note.getTitle())) {
                        System.out.println("Find note!");
                        noteInSideTheCourse.addComment(comment);
                        displayComment();
                        System.out.println("Comment added");
                        return;
                    }
                }
            }
        }
        System.out.println("Adding comment failed");
    }

    public void addNote(Course course, Note note) {
        for (Course courseInList : courseList.getCourses()) {
            System.out.println("Receiving a note now");
            System.out.println("Checking notes...");
            if ( courseInList.getCourseName().equals(course.getCourseName())) {
                System.out.println("Find course!");
                courseInList.addNote(note);
                //updateNotes();
				if (currentCourse.getCourseName().equals(course.getCourseName())) {
					if (this.sortChoiceBox.getSelectedIndex() == 0) {
						sortNotes();
					} else {
						this.sortChoiceBox.setSelectedIndex(0);
					}
				}
                System.out.println("Note added!");
                return;
            }
        }
        System.out.println("Adding note failed");
    }

    public void addLike(AddingLike addLike) {
        for (Course courseInList : courseList.getCourses()) {
            System.out.println("Receiving a like note now");
            System.out.println("Checking notes...");
            for (Note note1 : courseInList.getAllNotes()) {
                if (note1.getTitle().equals(addLike.getNote().getTitle())) {
                    note1.addLike(addLike.getUser());
                    if (currentNote.getTitle().equals(note1.getTitle())) {
                        displayCurrentNote();
                    }
                    System.out.println("Like added");
                    return;
                }
            }
        }
        System.out.println("Add like failed");
    }

    public void addDisLike(AddingDislike addDisLike) {
        for (Course courseInList : courseList.getCourses()) {
            System.out.println("Receiving a dislike note now");
            System.out.println("Checking notes...");
            for (Note note1 : courseInList.getAllNotes()) {
                if (note1.getTitle().equals(addDisLike.getNote().getTitle())) {
                    note1.addDislike(addDisLike.getUser());
                    if (currentNote.getTitle().equals(note1.getTitle())) {
                        displayCurrentNote();
                    }
                    System.out.println("DisLike added");
                    return;
                }
            }
        }
        System.out.println("Add like failed");
    }
    
    private void displayComment() {
        comments.setText(Util.getHTMLforComments(currentNote));
    }


    public void changePresentation(PresentationANDCourse pc) {
        System.out.println("Changing presentation..");
        Presentation p = pc.getPresentation();
        Course c = pc.getCourse();
        for (Course course : courseList.getCourses()) {
            if (course.getCourseName().equals(c.getCourseName())) {
                course.setCurrentLecture(p);
            }
        }
        if (currentCourse.getCourseName().equals(c.getCourseName())) {
            if (presentation != null) { presentation.setVisible(false); }
            presentation = new InstructorPresentation(this.client,currentCourse);
            client.setInstructorPresentationWindow(presentation);
            presentation.setVisible(true);
        }

    }
    
    
	public void addCourse(Course course) {
		if (course.getInstructor().getUsername().equals(client.getUser().getUsername())) {
			if(courseList == null) {
				courseList = new CourseList(new Vector<Course>());
				this.post.setText("<html><body style='background-color:#f0f8ff;'>"
						+ "<div style='border: 1px solid; margin: 10px; padding: 20px; border-radius:25px; "
						+ "text-align:center; background: #ffffff; font-family: Lucida Grande'>"
						+ "<h1>Welcome to Notezza!"
						+ "<br/>Select a note to view!</h1></div>"
						+ "</body></html>");
				this.lecture.setEnabled(true);
				this.viewMember.setEnabled(true);
				this.jButton1.setEnabled(true);
				this.sortChoiceBox.setEnabled(true);
				currentCourse = course;
				this.sortNotes();
			}
			courseList.addACourse(course);
			courses = courseList.getCourses();
			int index = classes.getSelectedIndex();
			this.refreshClassesBox();
			classes.setSelectedIndex(index);
		}
	}

	public void refreshClassesBox() {
		dropDownModel = new DefaultComboBoxModel();
		for (Course course : courses) {
			dropDownModel.addElement(course.getCourseName());
		}
		classes.setModel(dropDownModel);
	}
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWinInstr(null,null).setVisible(true);
            }
        });
    }
    
    private ListCellRenderer<? super String> getCellRenderer() {
        return new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList<?> list,
                    Object value, int index, boolean isSelected,
                    boolean cellHasFocus) {
                JLabel cellRenderer = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected,cellHasFocus);
                cellRenderer.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0,Color.BLACK));
                return cellRenderer;
            }
        };
    }
    

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane CommentScroll;
    private javax.swing.JTextPane comments;
    private javax.swing.JTextField createComment;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel Menu;
    private javax.swing.JList<String> overviewList;
    private javax.swing.JTextPane post;
    private javax.swing.JButton postComment;
    private javax.swing.JScrollPane postScroll;
    private javax.swing.JLabel addClass;
    private javax.swing.JButton dislikeButton;
    private javax.swing.JPanel functionBar;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> classes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPanel layer1;
    private javax.swing.JPanel layer2;
    private javax.swing.JLabel lecture;
    private javax.swing.JButton likeButton;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel logout;
    private javax.swing.JLabel profile;
    private javax.swing.JTextField searchNote;
    private javax.swing.JComboBox<String> sortChoiceBox;
    private javax.swing.JLabel viewMember;
    private javax.swing.JPanel writeCommentPanel;
    // End of variables declaration
}
